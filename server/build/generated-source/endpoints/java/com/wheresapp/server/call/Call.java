/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-11-17 18:43:33 UTC)
 * on 2014-12-06 at 13:30:38 UTC 
 * Modify at your own risk.
 */

package com.wheresapp.server.call;

/**
 * Service definition for Call (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link CallRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Call extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.19.0 of the call library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://myApplicationId.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "call/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Call(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Call(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "accept".
   *
   * This request holds the parameters needed by the call server.  After setting any optional
   * parameters, call the {@link Accept#execute()} method to invoke the remote operation.
   *
   * @param callId
   * @return the request
   */
  public Accept accept(java.lang.String callId) throws java.io.IOException {
    Accept result = new Accept(callId);
    initialize(result);
    return result;
  }

  public class Accept extends CallRequest<com.wheresapp.server.call.model.Call> {

    private static final String REST_PATH = "{callId}/accept";

    /**
     * Create a request for the method "accept".
     *
     * This request holds the parameters needed by the the call server.  After setting any optional
     * parameters, call the {@link Accept#execute()} method to invoke the remote operation. <p> {@link
     * Accept#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param callId
     * @since 1.13
     */
    protected Accept(java.lang.String callId) {
      super(Call.this, "POST", REST_PATH, null, com.wheresapp.server.call.model.Call.class);
      this.callId = com.google.api.client.util.Preconditions.checkNotNull(callId, "Required parameter callId must be specified.");
    }

    @Override
    public Accept setAlt(java.lang.String alt) {
      return (Accept) super.setAlt(alt);
    }

    @Override
    public Accept setFields(java.lang.String fields) {
      return (Accept) super.setFields(fields);
    }

    @Override
    public Accept setKey(java.lang.String key) {
      return (Accept) super.setKey(key);
    }

    @Override
    public Accept setOauthToken(java.lang.String oauthToken) {
      return (Accept) super.setOauthToken(oauthToken);
    }

    @Override
    public Accept setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Accept) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Accept setQuotaUser(java.lang.String quotaUser) {
      return (Accept) super.setQuotaUser(quotaUser);
    }

    @Override
    public Accept setUserIp(java.lang.String userIp) {
      return (Accept) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String callId;

    /**

     */
    public java.lang.String getCallId() {
      return callId;
    }

    public Accept setCallId(java.lang.String callId) {
      this.callId = callId;
      return this;
    }

    @Override
    public Accept set(String parameterName, Object value) {
      return (Accept) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "createCall".
   *
   * This request holds the parameters needed by the call server.  After setting any optional
   * parameters, call the {@link CreateCall#execute()} method to invoke the remote operation.
   *
   * @param fromId
   * @param toId
   * @return the request
   */
  public CreateCall createCall(java.lang.String fromId, java.lang.String toId) throws java.io.IOException {
    CreateCall result = new CreateCall(fromId, toId);
    initialize(result);
    return result;
  }

  public class CreateCall extends CallRequest<com.wheresapp.server.call.model.Call> {

    private static final String REST_PATH = "{fromId}/call/{toId}";

    /**
     * Create a request for the method "createCall".
     *
     * This request holds the parameters needed by the the call server.  After setting any optional
     * parameters, call the {@link CreateCall#execute()} method to invoke the remote operation. <p>
     * {@link
     * CreateCall#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param fromId
     * @param toId
     * @since 1.13
     */
    protected CreateCall(java.lang.String fromId, java.lang.String toId) {
      super(Call.this, "POST", REST_PATH, null, com.wheresapp.server.call.model.Call.class);
      this.fromId = com.google.api.client.util.Preconditions.checkNotNull(fromId, "Required parameter fromId must be specified.");
      this.toId = com.google.api.client.util.Preconditions.checkNotNull(toId, "Required parameter toId must be specified.");
    }

    @Override
    public CreateCall setAlt(java.lang.String alt) {
      return (CreateCall) super.setAlt(alt);
    }

    @Override
    public CreateCall setFields(java.lang.String fields) {
      return (CreateCall) super.setFields(fields);
    }

    @Override
    public CreateCall setKey(java.lang.String key) {
      return (CreateCall) super.setKey(key);
    }

    @Override
    public CreateCall setOauthToken(java.lang.String oauthToken) {
      return (CreateCall) super.setOauthToken(oauthToken);
    }

    @Override
    public CreateCall setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (CreateCall) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public CreateCall setQuotaUser(java.lang.String quotaUser) {
      return (CreateCall) super.setQuotaUser(quotaUser);
    }

    @Override
    public CreateCall setUserIp(java.lang.String userIp) {
      return (CreateCall) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String fromId;

    /**

     */
    public java.lang.String getFromId() {
      return fromId;
    }

    public CreateCall setFromId(java.lang.String fromId) {
      this.fromId = fromId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String toId;

    /**

     */
    public java.lang.String getToId() {
      return toId;
    }

    public CreateCall setToId(java.lang.String toId) {
      this.toId = toId;
      return this;
    }

    @Override
    public CreateCall set(String parameterName, Object value) {
      return (CreateCall) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "deny".
   *
   * This request holds the parameters needed by the call server.  After setting any optional
   * parameters, call the {@link Deny#execute()} method to invoke the remote operation.
   *
   * @param callId
   * @return the request
   */
  public Deny deny(java.lang.String callId) throws java.io.IOException {
    Deny result = new Deny(callId);
    initialize(result);
    return result;
  }

  public class Deny extends CallRequest<com.wheresapp.server.call.model.Call> {

    private static final String REST_PATH = "{callId}/deny";

    /**
     * Create a request for the method "deny".
     *
     * This request holds the parameters needed by the the call server.  After setting any optional
     * parameters, call the {@link Deny#execute()} method to invoke the remote operation. <p> {@link
     * Deny#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
     * called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param callId
     * @since 1.13
     */
    protected Deny(java.lang.String callId) {
      super(Call.this, "POST", REST_PATH, null, com.wheresapp.server.call.model.Call.class);
      this.callId = com.google.api.client.util.Preconditions.checkNotNull(callId, "Required parameter callId must be specified.");
    }

    @Override
    public Deny setAlt(java.lang.String alt) {
      return (Deny) super.setAlt(alt);
    }

    @Override
    public Deny setFields(java.lang.String fields) {
      return (Deny) super.setFields(fields);
    }

    @Override
    public Deny setKey(java.lang.String key) {
      return (Deny) super.setKey(key);
    }

    @Override
    public Deny setOauthToken(java.lang.String oauthToken) {
      return (Deny) super.setOauthToken(oauthToken);
    }

    @Override
    public Deny setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Deny) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Deny setQuotaUser(java.lang.String quotaUser) {
      return (Deny) super.setQuotaUser(quotaUser);
    }

    @Override
    public Deny setUserIp(java.lang.String userIp) {
      return (Deny) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String callId;

    /**

     */
    public java.lang.String getCallId() {
      return callId;
    }

    public Deny setCallId(java.lang.String callId) {
      this.callId = callId;
      return this;
    }

    @Override
    public Deny set(String parameterName, Object value) {
      return (Deny) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "end".
   *
   * This request holds the parameters needed by the call server.  After setting any optional
   * parameters, call the {@link End#execute()} method to invoke the remote operation.
   *
   * @param callId
   * @return the request
   */
  public End end(java.lang.String callId) throws java.io.IOException {
    End result = new End(callId);
    initialize(result);
    return result;
  }

  public class End extends CallRequest<com.wheresapp.server.call.model.Call> {

    private static final String REST_PATH = "{callId}/end";

    /**
     * Create a request for the method "end".
     *
     * This request holds the parameters needed by the the call server.  After setting any optional
     * parameters, call the {@link End#execute()} method to invoke the remote operation. <p> {@link
     * End#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
     * called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param callId
     * @since 1.13
     */
    protected End(java.lang.String callId) {
      super(Call.this, "POST", REST_PATH, null, com.wheresapp.server.call.model.Call.class);
      this.callId = com.google.api.client.util.Preconditions.checkNotNull(callId, "Required parameter callId must be specified.");
    }

    @Override
    public End setAlt(java.lang.String alt) {
      return (End) super.setAlt(alt);
    }

    @Override
    public End setFields(java.lang.String fields) {
      return (End) super.setFields(fields);
    }

    @Override
    public End setKey(java.lang.String key) {
      return (End) super.setKey(key);
    }

    @Override
    public End setOauthToken(java.lang.String oauthToken) {
      return (End) super.setOauthToken(oauthToken);
    }

    @Override
    public End setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (End) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public End setQuotaUser(java.lang.String quotaUser) {
      return (End) super.setQuotaUser(quotaUser);
    }

    @Override
    public End setUserIp(java.lang.String userIp) {
      return (End) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String callId;

    /**

     */
    public java.lang.String getCallId() {
      return callId;
    }

    public End setCallId(java.lang.String callId) {
      this.callId = callId;
      return this;
    }

    @Override
    public End set(String parameterName, Object value) {
      return (End) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "transmit".
   *
   * This request holds the parameters needed by the call server.  After setting any optional
   * parameters, call the {@link Transmit#execute()} method to invoke the remote operation.
   *
   * @param callId
   * @param position
   * @return the request
   */
  public Transmit transmit(java.lang.String callId, java.lang.String position) throws java.io.IOException {
    Transmit result = new Transmit(callId, position);
    initialize(result);
    return result;
  }

  public class Transmit extends CallRequest<com.wheresapp.server.call.model.Call> {

    private static final String REST_PATH = "{callId}/transmit/{position}";

    /**
     * Create a request for the method "transmit".
     *
     * This request holds the parameters needed by the the call server.  After setting any optional
     * parameters, call the {@link Transmit#execute()} method to invoke the remote operation. <p>
     * {@link
     * Transmit#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param callId
     * @param position
     * @since 1.13
     */
    protected Transmit(java.lang.String callId, java.lang.String position) {
      super(Call.this, "POST", REST_PATH, null, com.wheresapp.server.call.model.Call.class);
      this.callId = com.google.api.client.util.Preconditions.checkNotNull(callId, "Required parameter callId must be specified.");
      this.position = com.google.api.client.util.Preconditions.checkNotNull(position, "Required parameter position must be specified.");
    }

    @Override
    public Transmit setAlt(java.lang.String alt) {
      return (Transmit) super.setAlt(alt);
    }

    @Override
    public Transmit setFields(java.lang.String fields) {
      return (Transmit) super.setFields(fields);
    }

    @Override
    public Transmit setKey(java.lang.String key) {
      return (Transmit) super.setKey(key);
    }

    @Override
    public Transmit setOauthToken(java.lang.String oauthToken) {
      return (Transmit) super.setOauthToken(oauthToken);
    }

    @Override
    public Transmit setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Transmit) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Transmit setQuotaUser(java.lang.String quotaUser) {
      return (Transmit) super.setQuotaUser(quotaUser);
    }

    @Override
    public Transmit setUserIp(java.lang.String userIp) {
      return (Transmit) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String callId;

    /**

     */
    public java.lang.String getCallId() {
      return callId;
    }

    public Transmit setCallId(java.lang.String callId) {
      this.callId = callId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String position;

    /**

     */
    public java.lang.String getPosition() {
      return position;
    }

    public Transmit setPosition(java.lang.String position) {
      this.position = position;
      return this;
    }

    @Override
    public Transmit set(String parameterName, Object value) {
      return (Transmit) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Call}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Call}. */
    @Override
    public Call build() {
      return new Call(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link CallRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setCallRequestInitializer(
        CallRequestInitializer callRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(callRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
